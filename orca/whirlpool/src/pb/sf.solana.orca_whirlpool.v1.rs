use serde::{Deserialize, Serialize};

// This file is @generated by prost-build.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbPubKey {
    /// Solana public key (32 bytes)
    
    pub pub_key: ::core::option::Option<Vec<u8>>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbBumps {
    
    pub whirlpool_bump: ::core::option::Option<u32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbOpenPositionBumps {
    
    pub position_bump: ::core::option::Option<u32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbOpenPositionWithMetadataBumps {
    
    pub position_bump: ::core::option::Option<u32>,
    
    pub metadata_bump: ::core::option::Option<u32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbRemainingAccountsSlice {
    
    pub accounts_type: ::core::option::Option<i32>,
    /// Corresponds to Int8ul
    
    pub length: ::core::option::Option<u32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbRemainingAccountsInfo {
    /// Represents Vector.get(RemainingAccountsSliceLayout)
    
    pub slices: Vec<PbRemainingAccountsSlice>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbInitializeConfigLayout {
    
    pub fee_authority: ::core::option::Option<PbPubKey>,
    
    pub collect_protocol_fees_authority: ::core::option::Option<PbPubKey>,
    
    pub reward_emissions_super_authority: ::core::option::Option<PbPubKey>,
    /// Int16ul
    
    pub default_protocol_fee_rate: ::core::option::Option<u32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbInitializePoolLayout {
    
    pub bumps: ::core::option::Option<PbBumps>,
    /// Int16ul
    
    pub tick_spacing: ::core::option::Option<u32>,
    /// Use the new PbUint128 type for initial_sqrt_price
    
    pub initial_sqrt_price: ::core::option::Option<PbUint128>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbInitializeTickArrayLayout {
    /// Int32sl
    
    pub start_tick_index: ::core::option::Option<i32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbInitializeFeeTierLayout {
    /// Int16ul
    
    pub tick_spacing: ::core::option::Option<u32>,
    /// Int16ul
    
    pub default_fee_rate: ::core::option::Option<u32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbInitializeRewardLayout {
    /// Int8ul
    
    pub reward_index: ::core::option::Option<u32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbSetRewardEmissionsLayout {
    /// Int8ul
    
    pub reward_index: ::core::option::Option<u32>,
    /// Use the new PbUint128 type for emissions_per_second_x64
    
    pub emissions_per_second_x64: ::core::option::Option<PbUint128>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbOpenPositionLayout {
    
    pub open_position_bumps: ::core::option::Option<PbOpenPositionBumps>,
    /// Int32sl
    
    pub tick_lower_index: ::core::option::Option<i32>,
    /// Int32sl
    
    pub tick_upper_index: ::core::option::Option<i32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbOpenPositionWithMetadataLayout {
    
    pub open_position_with_metadata_bumps: ::core::option::Option<
        PbOpenPositionWithMetadataBumps,
    >,
    /// Int32sl
    
    pub tick_lower_index: ::core::option::Option<i32>,
    /// Int32sl
    
    pub tick_upper_index: ::core::option::Option<i32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbIncreaseLiquidityLayout {
    /// Use the new PbUint128 type for liquidity_amount
    
    pub liquidity_amount: ::core::option::Option<PbUint128>,
    /// Int64ul
    
    pub token_max_a: ::core::option::Option<u64>,
    /// Int64ul
    
    pub token_max_b: ::core::option::Option<u64>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbDecreaseLiquidityLayout {
    /// Use the new PbUint128 type for liquidity_amount
    
    pub liquidity_amount: ::core::option::Option<PbUint128>,
    /// Int64ul
    
    pub token_min_a: ::core::option::Option<u64>,
    /// Int64ul
    
    pub token_min_b: ::core::option::Option<u64>,
}
/// Empty message for instructions with no args
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbUpdateFeesAndRewardsLayout {}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbCollectFeesLayout {}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbCollectProtocolFeesLayout {}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbClosePositionLayout {}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbSetFeeAuthorityLayout {}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbSetCollectProtocolFeesAuthorityLayout {}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbSetRewardEmissionsSuperAuthorityLayout {}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbInitializePositionBundleLayout {}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbInitializePositionBundleWithMetadataLayout {}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbDeletePositionBundleLayout {}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbInitializeConfigExtensionLayout {}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbSetConfigExtensionAuthorityLayout {}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbSetTokenBadgeAuthorityLayout {}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbInitializeTokenBadgeLayout {}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbDeleteTokenBadgeLayout {}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbOpenPositionWithTokenExtensionsLayout {
    /// Int32sl
    
    pub tick_lower_index: ::core::option::Option<i32>,
    /// Int32sl
    
    pub tick_upper_index: ::core::option::Option<i32>,
    /// Flag
    
    pub with_token_metadata_extension: ::core::option::Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbClosePositionWithTokenExtensionsLayout {
    
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbCollectRewardLayout {
    /// Int8ul
    
    pub reward_index: ::core::option::Option<u32>,
}
/// Modify the PbUint128 message to be just a string
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbUint128 {
    /// String representation of the u128 value
    
    pub value: ::core::option::Option<String>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbSwapLayout {
    /// Int64ul
    
    pub amount: ::core::option::Option<u64>,
    /// Int64ul
    
    pub other_amount_threshold: ::core::option::Option<u64>,
    /// Use the new PbUint128 type instead of raw bytes
    
    pub sqrt_price_limit: ::core::option::Option<PbUint128>,
    /// Flag
    
    pub amount_specified_is_input: ::core::option::Option<bool>,
    /// Flag
    
    pub a_to_b: ::core::option::Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbSetDefaultFeeRateLayout {
    /// Int16ul
    
    pub default_fee_rate: ::core::option::Option<u32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbSetDefaultProtocolFeeRateLayout {
    /// Int16ul
    
    pub default_protocol_fee_rate: ::core::option::Option<u32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbSetFeeRateLayout {
    /// Int16ul
    
    pub fee_rate: ::core::option::Option<u32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbSetProtocolFeeRateLayout {
    /// Int16ul
    
    pub protocol_fee_rate: ::core::option::Option<u32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbSetRewardAuthorityLayout {
    /// Int8ul
    
    pub reward_index: ::core::option::Option<u32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbSetRewardAuthorityBySuperAuthorityLayout {
    /// Int8ul
    
    pub reward_index: ::core::option::Option<u32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbTwoHopSwapLayout {
    /// Int64ul
    
    pub amount: ::core::option::Option<u64>,
    /// Int64ul
    
    pub other_amount_threshold: ::core::option::Option<u64>,
    /// Flag
    
    pub amount_specified_is_input: ::core::option::Option<bool>,
    /// Flag
    
    pub a_to_b_one: ::core::option::Option<bool>,
    /// Flag
    
    pub a_to_b_two: ::core::option::Option<bool>,
    /// Use the new PbUint128 type for sqrt_price_limit_one
    
    pub sqrt_price_limit_one: ::core::option::Option<PbUint128>,
    /// Use the new PbUint128 type for sqrt_price_limit_two
    
    pub sqrt_price_limit_two: ::core::option::Option<PbUint128>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbOpenBundledPositionLayout {
    /// Int16ul
    
    pub bundle_index: ::core::option::Option<u32>,
    /// Int32sl
    
    pub tick_lower_index: ::core::option::Option<i32>,
    /// Int32sl
    
    pub tick_upper_index: ::core::option::Option<i32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbCloseBundledPositionLayout {
    /// Int16ul
    
    pub bundle_index: ::core::option::Option<u32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbCollectFeesV2Layout {
    /// Represents AvailableOptional.get(RemainingAccountsInfoLayout)
    
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbCollectProtocolFeesV2Layout {
    /// Represents AvailableOptional.get(RemainingAccountsInfoLayout)
    
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbCollectRewardV2Layout {
    /// Int8ul
    
    pub reward_index: ::core::option::Option<u32>,
    /// Represents AvailableOptional.get(RemainingAccountsInfoLayout)
    
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbDecreaseLiquidityV2Layout {
    /// Use the new PbUint128 type for liquidity_amount
    
    pub liquidity_amount: ::core::option::Option<PbUint128>,
    /// Int64ul
    
    pub token_min_a: ::core::option::Option<u64>,
    /// Int64ul
    
    pub token_min_b: ::core::option::Option<u64>,
    /// Represents AvailableOptional.get(RemainingAccountsInfoLayout)
    
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbIncreaseLiquidityV2Layout {
    /// Use the new PbUint128 type for liquidity_amount
    
    pub liquidity_amount: ::core::option::Option<PbUint128>,
    
    pub token_max_a: ::core::option::Option<u64>,
    
    pub token_max_b: ::core::option::Option<u64>,
    /// Represents AvailableOptional.get(RemainingAccountsInfoLayout)
    
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbInitializePoolV2Layout {
    /// Int16ul
    
    pub tick_spacing: ::core::option::Option<u32>,
    /// Use the new PbUint128 type for initial_sqrt_price
    
    pub initial_sqrt_price: ::core::option::Option<PbUint128>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbInitializeRewardV2Layout {
    /// Int8ul
    
    pub reward_index: ::core::option::Option<u32>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbSetRewardEmissionsV2Layout {
    /// Int8ul
    
    pub reward_index: ::core::option::Option<u32>,
    /// Use the new PbUint128 type for emissions_per_second_x64
    
    pub emissions_per_second_x64: ::core::option::Option<PbUint128>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbSwapV2Layout {
    /// Int64ul
    
    pub amount: ::core::option::Option<u64>,
    /// Int64ul
    
    pub other_amount_threshold: ::core::option::Option<u64>,
    /// Use the new PbUint128 type instead of raw bytes
    
    pub sqrt_price_limit: ::core::option::Option<PbUint128>,
    /// Flag
    
    pub amount_specified_is_input: ::core::option::Option<bool>,
    /// Flag
    
    pub a_to_b: ::core::option::Option<bool>,
    /// Represents AvailableOptional.get(RemainingAccountsInfoLayout)
    
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbTwoHopSwapV2Layout {
    /// Int64ul
    
    pub amount: ::core::option::Option<u64>,
    /// Int64ul
    
    pub other_amount_threshold: ::core::option::Option<u64>,
    /// Flag
    
    pub amount_specified_is_input: ::core::option::Option<bool>,
    /// Flag
    
    pub a_to_b_one: ::core::option::Option<bool>,
    /// Flag
    
    pub a_to_b_two: ::core::option::Option<bool>,
    /// Use the new PbUint128 type for sqrt_price_limit_one
    
    pub sqrt_price_limit_one: ::core::option::Option<PbUint128>,
    /// Use the new PbUint128 type for sqrt_price_limit_two
    
    pub sqrt_price_limit_two: ::core::option::Option<PbUint128>,
    /// Represents AvailableOptional.get(RemainingAccountsInfoLayout)
    
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
/// --- Flattened Arg Message ---
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct FlatArg {
    /// optional string instruction_type = 1; // Field removed
    
    pub amount: ::core::option::Option<String>,
    
    pub other_amount_threshold: ::core::option::Option<String>,
    
    pub amount_specified_is_input: ::core::option::Option<bool>,
    /// Swap specific
    ///
    /// Flattened PbUint128
    
    pub sqrt_price_limit: ::core::option::Option<String>,
    
    pub a_to_b: ::core::option::Option<bool>,
    /// TwoHop specific
    
    pub a_to_b_one: ::core::option::Option<bool>,
    
    pub a_to_b_two: ::core::option::Option<bool>,
    /// Flattened PbUint128
    
    pub sqrt_price_limit_one: ::core::option::Option<String>,
    /// Flattened PbUint128
    
    pub sqrt_price_limit_two: ::core::option::Option<String>,
    /// Liquidity specific
    ///
    /// Flattened PbUint128
    
    pub liquidity_amount: ::core::option::Option<String>,
    /// Use string for u64
    
    pub token_max_a: ::core::option::Option<String>,
    /// Use string for u64
    
    pub token_max_b: ::core::option::Option<String>,
    /// Use string for u64
    
    pub token_min_a: ::core::option::Option<String>,
    /// Use string for u64
    
    pub token_min_b: ::core::option::Option<String>,
    /// Reward specific
    
    pub reward_index: ::core::option::Option<u32>,
    /// Flattened PbUint128
    
    pub emissions_per_second_x64: ::core::option::Option<String>,
    /// Tick related
    
    pub tick_lower_index: ::core::option::Option<i32>,
    
    pub tick_upper_index: ::core::option::Option<i32>,
    
    pub start_tick_index: ::core::option::Option<i32>,
    /// Fee related
    
    pub default_fee_rate: ::core::option::Option<u32>,
    
    pub default_protocol_fee_rate: ::core::option::Option<u32>,
    
    pub fee_rate: ::core::option::Option<u32>,
    
    pub protocol_fee_rate: ::core::option::Option<u32>,
    /// Bundle related
    
    pub bundle_index: ::core::option::Option<u32>,
    /// Config related
    /// Note: Bump/Authority fields usually not needed in flattened args
    
    pub with_token_metadata_extension: ::core::option::Option<bool>,
    /// Added missing field
    
    pub tick_spacing: ::core::option::Option<u32>,
}
/// --- Aggregated Arg Message ---
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct Arg {
    /// String representation of the instruction type (e.g., "InitializeConfig")
    
    pub instruction_type: String,
    pub instruction_args: ::core::option::Option<arg::InstructionArgs>,
}



/// Nested message and enum types in `Arg`.
pub mod arg {
    
    use serde::{Deserialize, Serialize};

    #[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
    pub enum InstructionArgs {
        
        InitializeConfig(super::PbInitializeConfigLayout),
        
        InitializePool(super::PbInitializePoolLayout),
        
        InitializeTickArray(super::PbInitializeTickArrayLayout),
        
        InitializeFeeTier(super::PbInitializeFeeTierLayout),
        
        InitializeReward(super::PbInitializeRewardLayout),
        
        SetRewardEmissions(super::PbSetRewardEmissionsLayout),
        
        OpenPosition(super::PbOpenPositionLayout),
        
        OpenPositionWithMetadata(super::PbOpenPositionWithMetadataLayout),
        
        IncreaseLiquidity(super::PbIncreaseLiquidityLayout),
        
        DecreaseLiquidity(super::PbDecreaseLiquidityLayout),
        
        UpdateFeesAndRewards(super::PbUpdateFeesAndRewardsLayout),
        
        CollectFees(super::PbCollectFeesLayout),
        
        CollectReward(super::PbCollectRewardLayout),
        
        CollectProtocolFees(super::PbCollectProtocolFeesLayout),
        
        Swap(super::PbSwapLayout),
        
        ClosePosition(super::PbClosePositionLayout),
        
        SetDefaultFeeRate(super::PbSetDefaultFeeRateLayout),
        
        SetDefaultProtocolFeeRate(super::PbSetDefaultProtocolFeeRateLayout),
        
        SetFeeRate(super::PbSetFeeRateLayout),
        
        SetProtocolFeeRate(super::PbSetProtocolFeeRateLayout),
        
        SetFeeAuthority(super::PbSetFeeAuthorityLayout),
        
        SetCollectProtocolFeesAuthority(super::PbSetCollectProtocolFeesAuthorityLayout),
        
        SetRewardAuthority(super::PbSetRewardAuthorityLayout),
        
        SetRewardAuthorityBySuperAuthority(
            super::PbSetRewardAuthorityBySuperAuthorityLayout,
        ),
        
        SetRewardEmissionsSuperAuthority(
            super::PbSetRewardEmissionsSuperAuthorityLayout,
        ),
        
        TwoHopSwap(super::PbTwoHopSwapLayout),
        
        InitializePositionBundle(super::PbInitializePositionBundleLayout),
        
        InitializePositionBundleWithMetadata(
            super::PbInitializePositionBundleWithMetadataLayout,
        ),
        
        DeletePositionBundle(super::PbDeletePositionBundleLayout),
        
        OpenBundledPosition(super::PbOpenBundledPositionLayout),
        
        CloseBundledPosition(super::PbCloseBundledPositionLayout),
        
        CollectFeesV2(super::PbCollectFeesV2Layout),
        
        CollectProtocolFeesV2(super::PbCollectProtocolFeesV2Layout),
        
        CollectRewardV2(super::PbCollectRewardV2Layout),
        
        DecreaseLiquidityV2(super::PbDecreaseLiquidityV2Layout),
        
        IncreaseLiquidityV2(super::PbIncreaseLiquidityV2Layout),
        
        InitializePoolV2(super::PbInitializePoolV2Layout),
        
        InitializeRewardV2(super::PbInitializeRewardV2Layout),
        
        SetRewardEmissionsV2(super::PbSetRewardEmissionsV2Layout),
        
        SwapV2(super::PbSwapV2Layout),
        
        TwoHopSwapV2(super::PbTwoHopSwapV2Layout),
        
        InitializeConfigExtension(super::PbInitializeConfigExtensionLayout),
        
        SetConfigExtensionAuthority(super::PbSetConfigExtensionAuthorityLayout),
        
        SetTokenBadgeAuthority(super::PbSetTokenBadgeAuthorityLayout),
        
        InitializeTokenBadge(super::PbInitializeTokenBadgeLayout),
        
        DeleteTokenBadge(super::PbDeleteTokenBadgeLayout),
        
        OpenPositionWithTokenExtensions(super::PbOpenPositionWithTokenExtensionsLayout),
        ClosePositionWithTokenExtensions(super::PbClosePositionWithTokenExtensionsLayout),
        
        InitializeAccount(super::PbInitializeAccountLayout),
        /// Add other instruction args here as needed...
        
        IdlWrite(super::PbIdlWriteLayout),
    }
}
/// Contains the accounts involved in the instruction, identified by their role.
/// All fields are optional as not all instructions use all accounts.
/// Based on the keys found in `instructionTypeAccounts` in the Python code.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct InputAccounts {
    /// Common accounts
    
    pub funder: ::core::option::Option<String>,
    
    pub owner: ::core::option::Option<String>,
    
    pub system_program: ::core::option::Option<String>,
    
    pub token_program: ::core::option::Option<String>,
    
    pub rent: ::core::option::Option<String>,
    
    pub associated_token_program: ::core::option::Option<String>,
    
    pub position_authority: ::core::option::Option<String>,
    
    pub position: ::core::option::Option<String>,
    
    pub position_mint: ::core::option::Option<String>,
    
    pub position_token_account: ::core::option::Option<String>,
    
    pub whirlpool: ::core::option::Option<String>,
    
    pub token_owner_account_a: ::core::option::Option<String>,
    
    pub token_owner_account_b: ::core::option::Option<String>,
    
    pub token_vault_a: ::core::option::Option<String>,
    
    pub token_vault_b: ::core::option::Option<String>,
    
    pub tick_array_lower: ::core::option::Option<String>,
    
    pub tick_array_upper: ::core::option::Option<String>,
    
    pub receiver: ::core::option::Option<String>,
    
    pub token_authority: ::core::option::Option<String>,
    /// And oracleOne, oracleTwo for TwoHopSwap
    
    pub oracle: ::core::option::Option<String>,
    /// Config related
    ///
    /// Renamed from whirlpools_config for brevity
    
    pub config: ::core::option::Option<String>,
    
    pub fee_authority: ::core::option::Option<String>,
    
    pub collect_protocol_fees_authority: ::core::option::Option<
        String,
    >,
    
    pub new_collect_protocol_fees_authority: ::core::option::Option<
        String,
    >,
    
    pub new_fee_authority: ::core::option::Option<String>,
    /// Fee Tier related
    
    pub fee_tier: ::core::option::Option<String>,
    /// Reward related
    
    pub reward_authority: ::core::option::Option<String>,
    
    pub reward_mint: ::core::option::Option<String>,
    
    pub reward_vault: ::core::option::Option<String>,
    
    pub new_reward_authority: ::core::option::Option<String>,
    
    pub reward_emissions_super_authority: ::core::option::Option<
        String,
    >,
    
    pub new_reward_emissions_super_authority: ::core::option::Option<
        String,
    >,
    /// From CollectReward
    
    pub reward_owner_account: ::core::option::Option<String>,
    /// Pool specific
    
    pub token_mint_a: ::core::option::Option<String>,
    
    pub token_mint_b: ::core::option::Option<String>,
    /// From CollectProtocolFees
    
    pub token_destination_a: ::core::option::Option<String>,
    /// From CollectProtocolFees
    
    pub token_destination_b: ::core::option::Option<String>,
    /// Tick Array specific
    ///
    /// From InitializeTickArray
    
    pub tick_array: ::core::option::Option<String>,
    /// From Swap
    
    pub tick_array_0: ::core::option::Option<String>,
    /// From Swap
    
    pub tick_array_1: ::core::option::Option<String>,
    /// From Swap
    
    pub tick_array_2: ::core::option::Option<String>,
    /// OpenPositionWithMetadata specific
    
    pub position_metadata_account: ::core::option::Option<
        String,
    >,
    
    pub metadata_program: ::core::option::Option<String>,
    
    pub metadata_update_auth: ::core::option::Option<String>,
    /// Two Hop Swap specific
    
    pub whirlpool_one: ::core::option::Option<String>,
    
    pub whirlpool_two: ::core::option::Option<String>,
    
    pub token_owner_account_one_a: ::core::option::Option<
        String,
    >,
    
    pub token_vault_one_a: ::core::option::Option<String>,
    
    pub token_owner_account_one_b: ::core::option::Option<
        String,
    >,
    
    pub token_vault_one_b: ::core::option::Option<String>,
    
    pub token_owner_account_two_a: ::core::option::Option<
        String,
    >,
    
    pub token_vault_two_a: ::core::option::Option<String>,
    
    pub token_owner_account_two_b: ::core::option::Option<
        String,
    >,
    
    pub token_vault_two_b: ::core::option::Option<String>,
    
    pub tick_array_one_0: ::core::option::Option<String>,
    
    pub tick_array_one_1: ::core::option::Option<String>,
    
    pub tick_array_one_2: ::core::option::Option<String>,
    
    pub tick_array_two_0: ::core::option::Option<String>,
    
    pub tick_array_two_1: ::core::option::Option<String>,
    
    pub tick_array_two_2: ::core::option::Option<String>,
    
    pub oracle_one: ::core::option::Option<String>,
    
    pub oracle_two: ::core::option::Option<String>,
    /// Position Bundle related
    
    pub position_bundle: ::core::option::Option<String>,
    
    pub position_bundle_mint: ::core::option::Option<String>,
    
    pub position_bundle_token_account: ::core::option::Option<
        String,
    >,
    
    pub position_bundle_owner: ::core::option::Option<String>,
    
    pub position_bundle_metadata: ::core::option::Option<String>,
    /// From Open/Close BundledPosition
    
    pub bundled_position: ::core::option::Option<String>,
    /// From Open/Close BundledPosition
    
    pub position_bundle_authority: ::core::option::Option<
        String,
    >,
    /// V2 specific accounts
    
    pub token_program_a: ::core::option::Option<String>,
    
    pub token_program_b: ::core::option::Option<String>,
    
    pub memo_program: ::core::option::Option<String>,
    
    pub reward_token_program: ::core::option::Option<String>,
    
    pub token_badge_a: ::core::option::Option<String>,
    
    pub token_badge_b: ::core::option::Option<String>,
    
    pub reward_token_badge: ::core::option::Option<String>,
    /// TwoHopSwapV2
    
    pub token_mint_input: ::core::option::Option<String>,
    /// TwoHopSwapV2
    
    pub token_mint_intermediate: ::core::option::Option<String>,
    /// TwoHopSwapV2
    
    pub token_mint_output: ::core::option::Option<String>,
    /// TwoHopSwapV2
    
    pub token_program_input: ::core::option::Option<String>,
    /// TwoHopSwapV2
    
    pub token_program_intermediate: ::core::option::Option<
        String,
    >,
    /// TwoHopSwapV2
    
    pub token_program_output: ::core::option::Option<String>,
    /// TwoHopSwapV2
    
    pub token_owner_account_input: ::core::option::Option<
        String,
    >,
    /// TwoHopSwapV2
    
    pub token_vault_one_input: ::core::option::Option<String>,
    /// TwoHopSwapV2
    
    pub token_vault_one_intermediate: ::core::option::Option<
        String,
    >,
    /// TwoHopSwapV2
    
    pub token_vault_two_intermediate: ::core::option::Option<
        String,
    >,
    /// TwoHopSwapV2
    
    pub token_vault_two_output: ::core::option::Option<String>,
    /// TwoHopSwapV2
    
    pub token_owner_account_output: ::core::option::Option<
        String,
    >,
    /// Config Extension related
    ///
    /// Renamed from whirlpools_config_extension
    
    pub config_extension: ::core::option::Option<String>,
    
    pub config_extension_authority: ::core::option::Option<
        String,
    >,
    
    pub new_config_extension_authority: ::core::option::Option<
        String,
    >,
    /// Token Badge related
    
    pub token_badge_authority: ::core::option::Option<String>,
    
    pub new_token_badge_authority: ::core::option::Option<
        String,
    >,
    /// Used in Initialize/Delete TokenBadge
    
    pub token_mint: ::core::option::Option<String>,
    
    pub token_badge: ::core::option::Option<String>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct Meta {
    /// YYYY-MM-DD
    
    
    pub instruction_type: ::core::option::Option<String>,
    
    pub args: ::core::option::Option<FlatArg>,
    
    pub input_accounts: ::core::option::Option<InputAccounts>
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct Output {
    
    pub data: Vec<Meta>,
}
/// Add dummy fields to potentially problematic empty messages
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbInitializeAccountLayout {
    
    pub dummy: ::core::option::Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub struct PbIdlWriteLayout {
    
    pub dummy: ::core::option::Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
#[repr(i32)]
pub enum PbAccountsType {
    TransferHookA = 0,
    TransferHookB = 1,
    TransferHookReward = 2,
    TransferHookInput = 3,
    TransferHookIntermediate = 4,
    TransferHookOutput = 5,
    SupplementalTickArrays = 6,
    SupplementalTickArraysOne = 7,
    SupplementalTickArraysTwo = 8,
}
impl PbAccountsType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TransferHookA => "TRANSFER_HOOK_A",
            Self::TransferHookB => "TRANSFER_HOOK_B",
            Self::TransferHookReward => "TRANSFER_HOOK_REWARD",
            Self::TransferHookInput => "TRANSFER_HOOK_INPUT",
            Self::TransferHookIntermediate => "TRANSFER_HOOK_INTERMEDIATE",
            Self::TransferHookOutput => "TRANSFER_HOOK_OUTPUT",
            Self::SupplementalTickArrays => "SUPPLEMENTAL_TICK_ARRAYS",
            Self::SupplementalTickArraysOne => "SUPPLEMENTAL_TICK_ARRAYS_ONE",
            Self::SupplementalTickArraysTwo => "SUPPLEMENTAL_TICK_ARRAYS_TWO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRANSFER_HOOK_A" => Some(Self::TransferHookA),
            "TRANSFER_HOOK_B" => Some(Self::TransferHookB),
            "TRANSFER_HOOK_REWARD" => Some(Self::TransferHookReward),
            "TRANSFER_HOOK_INPUT" => Some(Self::TransferHookInput),
            "TRANSFER_HOOK_INTERMEDIATE" => Some(Self::TransferHookIntermediate),
            "TRANSFER_HOOK_OUTPUT" => Some(Self::TransferHookOutput),
            "SUPPLEMENTAL_TICK_ARRAYS" => Some(Self::SupplementalTickArrays),
            "SUPPLEMENTAL_TICK_ARRAYS_ONE" => Some(Self::SupplementalTickArraysOne),
            "SUPPLEMENTAL_TICK_ARRAYS_TWO" => Some(Self::SupplementalTickArraysTwo),
            _ => None,
        }
    }
}

#[derive(Debug, Clone, Serialize, Deserialize, Default)]
#[serde(rename_all = "camelCase")]
pub struct JsonMeta {
    pub instruction_type: String,
    pub args: FlatArg,
    pub input_accounts: InputAccounts,
}

impl From<Meta> for JsonMeta{
    fn from(meta: Meta) -> Self {
        JsonMeta {
            // if missing, default to the empty string
            instruction_type: meta.instruction_type.unwrap_or_default(),
            // FlatArg and InputAccounts both have Default impls
            args:            meta.args.unwrap_or_default(),
            input_accounts:  meta.input_accounts.unwrap_or_default()
        }
    }
}

